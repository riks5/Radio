; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[common]
monitor_speed = 115200
build_flags = 
	-D TFT_FONT=0
	-D NTP_Pool_1='"europe.pool.ntp.org"'
	-D NTP_Pool_2='"pool.ntp.org"'
	-D NTP_Pool_3='"time-a-g.nist.gov"'
	-D CORE_DEBUG_LEVEL=2
	-D CONFIG_ARDUHAL_LOG_COLORS=1
	-D ARDUINO_RUNNING_CORE=1
	-D ARDUINO_EVENT_RUNNING_CORE=1
	-D AUDIOTASK_CORE=0
	-D AUDIOCONTROLTASK_CORE=0
	-D AUDIOCONTROLTASK_PRIO=2
	-D BOARD_HAS_PSRAM=1
	-D MONITOR_SPEED=${this.monitor_speed}
	-D SHA_SIZE=20
	-Wall
	-Wextra

[esp32]
board_build.partitions = boards/miniwebradio4MB.csv
board = ESP32-Dev-4MB

[esp32s3]
board_build.partitions = boards/miniwebradio16MB.csv
board = ESP32-S3-DevKitC-1-N16R8

[ota]
upload_port = "MiniWebRadio.local"
upload_protocol = espota

[env]
extra_scripts = pre:env-extra.py
platform = https://github.com/pioarduino/platform-espressif32/releases/download/51.03.05/platform-espressif32.zip
framework = arduino, espidf
build_flags = ${common.build_flags}
monitor_speed = ${common.monitor_speed}
monitor_filters = esp32_exception_decoder, send_on_enter, log2file
upload_speed = 921600
board_build.embed_txtfiles = 
	managed_components/espressif__esp_insights/server_certs/https_server.crt
	managed_components/espressif__esp_rainmaker/server_certs/rmaker_mqtt_server.crt
	managed_components/espressif__esp_rainmaker/server_certs/rmaker_claim_service_server.crt
	managed_components/espressif__esp_rainmaker/server_certs/rmaker_ota_server.crt
lib_deps = 
	https://github.com/schreibfaul1/ESP32-audioI2S.git
	https://github.com/schreibfaul1/ESP32-KCX-BT-EMITTER.git
	https://github.com/schreibfaul1/ESP32-DLNA-Client.git
	https://github.com/schreibfaul1/ESP32-IR-Remote-Control.git

[env:esp32]
board = ${esp32.board}
board_build.partitions = ${esp32.board_build.partitions}

[env:esp32s3]
board = ${esp32s3.board}
board_build.partitions = ${esp32s3.board_build.partitions}

[env:esp32_OTA]
board = ${esp32.board}
board_build.partitions = ${esp32.board_build.partitions}
upload_port = ${ota.upload_port}
upload_protocol = ${ota.upload_protocol}

[env:esp32s3_OTA]
board = ${esp32s3.board}
board_build.partitions = ${esp32s3.board_build.partitions}
upload_port = ${ota.upload_port}
upload_protocol = ${ota.upload_protocol}

[env:esp32dev]
platform = espressif32
board = esp32dev
framework = arduino
